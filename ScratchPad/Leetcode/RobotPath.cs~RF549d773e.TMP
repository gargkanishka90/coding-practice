using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ScratchPad.Leetcode
{
    public class Path
    {
        private int x;
        private int y;

        public Path(int i, int j)
        {
            x = i;
            y = j;
        }
    }
    
    public class RobotPath
    {
        public static IList<Path> GetPath(int[,] grid)
        {
            var numRows = grid.GetLength(0);
            var numCols = grid.GetLength(1);
            var memory = new int[numRows, numCols];
            var result = new List<Path>();
            if(PathUtil(grid, 0, 0, numRows-1, numCols-1, memory, result))
                return result;
            throw new Exception();
        }

        private static bool PathUtil(int[,] grid, int row, int col, int rowMax, int colMax, int[,] memory, IList<Path> path)
        {
            if (row == rowMax && col == colMax && grid[row, col] == 1)
            {
                path.Add(new Path(row, col));
                return true;
            }

            if (row < 0 || row > rowMax || col < 0 || col > colMax)
                return false;
            
            if(grid[row, col] == 1)
                path.Add(new Path(row, col));
            
            // Look Down
            if (PathUtil(grid, row+1, col, rowMax, colMax, memory, path) || PathUtil(grid, row, col + 1, rowMax, colMax, memory, path))
            {
                return true;
            }

            return false;

        }
    }
}
